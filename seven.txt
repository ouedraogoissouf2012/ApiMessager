=================================================================
                 DOCUMENT DE R√âF√âRENCE TECHNIQUE
                    APPLICATION 
                        Backend 
=================================================================

VERSION: 1.0
DERNI√àRE MAJ: 19 septembre 2025
OBJECTIF: Base de connaissance compl√®te pour √©viter les duplications
         et maintenir la coh√©rence architecturale

================================================
================
                     TABLE DES MATI√àRES
=================================================================

1. ARCHITECTURE SYST√àME ACTUELLE
2. INVENTORY COMPLET DU CODE EXISTANT
3. R√àGLES DE D√âVELOPPEMENT ANTI-DUPLICATION
4. HISTORIQUE DES PROBL√àMES & SOLUTIONS
5. PATTERNS & CONVENTIONS √âTABLIES
6. CHECKLIST DE MAINTENANCE
7. GUIDE DE D√âPANNAGE
8. SCRIPTS & COMMANDES UTILES

=================================================================
1. ARCHITECTURE SYST√àME ACTUELLE
=================================================================

üèóÔ∏è **STACK TECHNIQUE:**
- **Framework**: Spring Boot 3.5.4 + Java 21
- **Architecture**: Layered (Controller ‚Üí Service ‚Üí Repository ‚Üí Entity)
- **Database**: H2 (dev) / MySQL (prod) avec Spring Data JPA
- **Security**: Spring Security (CSRF disabled, CORS enabled)
- **Documentation**: SpringDoc OpenAPI 3 + Swagger UI
- **Email**: Spring Mail + Thymeleaf templates
- **WhatsApp**: Dual integration (Local Node.js + Facebook Graph API)
- **Async**: @EnableAsync avec CompletableFuture
- **Scheduling**: @EnableScheduling pour retry et cleanup
- **Validation**: Jakarta Validation sur DTOs

üåê **PORTS & ENDPOINTS:**
- **Application**: http://localhost:8083
- **H2 Console**: http://localhost:8083/h2-console
- **Swagger UI**: http://localhost:8083/swagger-ui.html
- **API Docs**: http://localhost:8083/api-docs
- **Health**: http://localhost:8083/actuator/health

üîÑ **PATTERN ARCHITECTURAL:**
```
NotificationController ‚Üí NotificationService ‚Üí EmailService/WhatsAppService
                    ‚Üì                       ‚Üì
ParentController ----‚Üí ParentService ------‚Üí ParentRepository
                                           ‚Üì
                                   Parent/Notification Entities
```

üóÇÔ∏è **STRUCTURE PACKAGES:**
```
com.school.notification_service/
‚îú‚îÄ‚îÄ controllers/          # REST endpoints
‚îú‚îÄ‚îÄ services/            # Business logic
‚îú‚îÄ‚îÄ repositories/        # Data access
‚îú‚îÄ‚îÄ entities/            # JPA entities
‚îú‚îÄ‚îÄ Dto/                # Data Transfer Objects
‚îú‚îÄ‚îÄ config/             # Configuration classes
‚îú‚îÄ‚îÄ enumr/              # Enumerations
‚îî‚îÄ‚îÄ exceptions/         # Error handling
```


=================================================================
2. INVENTORY COMPLET DU CODE EXISTANT
=================================================================

‚ö†Ô∏è R√àGLE CRITIQUE: TOUJOURS V√âRIFIER CET INVENTAIRE AVANT TOUTE MODIFICATION

üìå **ENDPOINTS REST EXISTANTS (NE PAS DUPLIQUER):**

üîî **NOTIFICATION CONTROLLER** (/api/notifications):
- POST /bulletin                    - Notification bulletin disponible
- POST /message                     - Message personnalis√© aux parents
- POST /bulk                        - Envoi en masse
- GET /{notificationId}/status      - Statut de livraison
- GET /parent/{parentId}/history    - Historique notifications parent
- POST /retry-failed                - Reprendre notifications √©chou√©es
- GET /statistics                   - Statistiques notifications
- GET /health                       - Health check service

üë• **PARENT CONTROLLER** (/api/parents):
- POST /                           - Cr√©er nouveau parent
- PUT /{parentId}                  - Mettre √† jour parent
- GET /{parentId}                  - R√©cup√©rer parent par ID
- GET /                           - Lister parents actifs
- GET /search?name=               - Rechercher parents par nom
- PATCH /{parentId}/toggle-status - Activer/d√©sactiver parent
- GET /statistics                 - Statistiques parents

üèóÔ∏è **SERVICES EXISTANTS (NE PAS DUPLIQUER):**
- **NotificationService**: Logique m√©tier notifications, retry, statistiques
- **EmailService**: Envoi emails via Spring Mail + templates Thymeleaf
- **WhatsAppService**: Integration WhatsApp (local + Facebook Graph API)
- **ParentService**: CRUD parents, recherche, statistiques

üóÉÔ∏è **ENTITIES JPA EXISTANTES:**
- **Parent**: id, firstName, lastName, email, whatsappNumber, preferredChannel, isActive, createdAt, updatedAt
- **Notification**: id, parent, type, subject, message, deliveryStatus, emailSent, whatsappSent, createdAt, sentAt, errorMessage

üì¶ **DTOS EXISTANTS (NE PAS DUPLIQUER):**
- **CreateParentRequest**: Cr√©ation/mise √† jour parent
- **NotificationRequest**: Message personnalis√©
- **BulletinNotificationRequest**: Notification bulletin sp√©cifique
- **BulkNotificationRequest**: Envoi en masse
- **NotificationResponse**: R√©ponse avec statut livraison
- **ApiResponse<T>**: Wrapper standardis√© pour toutes les r√©ponses

üîß **REPOSITORIES EXISTANTS:**
- **ParentRepository**: extends JpaRepository<Parent, Long> + recherche custom
- **NotificationRepository**: extends JpaRepository<Notification, Long> + stats

üéØ **ENUMERATIONS EXISTANTES:**
- **MessageChannel**: EMAIL, WHATSAPP, BOTH
- **NotificationType**: BULLETIN_NOTIFICATION, PARENT_MESSAGE, ABSENCE_ALERT, URGENT_NOTIFICATION
- **DeliveryStatus**: PENDING, SENT, DELIVERED, FAILED, RETRYING

‚öôÔ∏è **CONFIGURATION CLASSES:**
- **SecurityConfig**: CSRF disabled, CORS enabled
- **AsyncConfig**: Configuration async avec thread pool
- **OpenApiConfig**: Configuration Swagger/OpenAPI
- **NotificationProperties**: @ConfigurationProperties custom
- **NotificationScheduler**: T√¢ches programm√©es retry/cleanup
- **DataInitializer**: Donn√©es de test au d√©marrage

üîç **VALIDATION & EXCEPTIONS:**
- **GlobalExceptionHandler**: Gestion centralis√©e erreurs
- **NotificationValidator**: Validation m√©tier custom

üìÑ **TEMPLATES THYMELEAF EXISTANTS:**
- bulletin-notification.html
- parent-message.html
- absence-alert.html
- urgent-notification.html





=================================================================
3. R√àGLES DE D√âVELOPPEMENT ANTI-DUPLICATION
=================================================================

üö® R√àGLES ABSOLUES √Ä RESPECTER:

1. AVANT DE CR√âER UN ENDPOINT:
   ‚ùå V√©rifier dans la section "ENDPOINTS EXISTANTS" ci-dessus
   ‚ùå Scanner l'existant
   ‚úÖ √âtendre l'existant au lieu de dupliquer

2. AVANT DE CR√âER UNE ENTIT√â:
   ‚ùå V√©rifier dans la section "ENTITIES JPA EXISTANTES" ci-dessus
   ‚ùå Scanner le package entities/
   ‚ùå V√©rifier si l'entit√© Parent ou Notification peut √™tre √©tendue
   ‚úÖ Ajouter des champs √† l'entit√© existante si pertinent
   ‚úÖ Cr√©er relations JPA appropri√©es (@OneToMany, @ManyToOne)

3. AVANT DE CR√âER UN SERVICE:
   ‚ùå V√©rifier dans la section "SERVICES EXISTANTS" ci-dessus
   ‚ùå Scanner le package services/
   ‚ùå V√©rifier si NotificationService ou ParentService peut √™tre √©tendu
   ‚úÖ Ajouter des m√©thodes au service existant
   ‚úÖ Utiliser @Async pour op√©rations longues
   ‚úÖ Impl√©menter retry logic si n√©cessaire

4. AVANT DE CR√âER UN DTO:
   ‚ùå V√©rifier dans la section "DTOS EXISTANTS" ci-dessus
   ‚ùå Scanner le package Dto/
   ‚ùå V√©rifier si ApiResponse<T> peut wrapper votre donn√©es
   ‚úÖ √âtendre le DTO existant ou cr√©er une variante
   ‚úÖ Ajouter validation Jakarta (@Valid, @NotNull, @Email, etc.)

5. AVANT DE CR√âER UN ENDPOINT:
   ‚ùå V√©rifier dans la section "ENDPOINTS REST EXISTANTS" ci-dessus
   ‚ùå Scanner NotificationController et ParentController
   ‚ùå V√©rifier si endpoint similaire existe d√©j√†
   ‚úÖ √âtendre controller existant plut√¥t que cr√©er nouveau
   ‚úÖ Utiliser patterns ApiResponse + @Operation pour Swagger

üîÑ **WORKFLOW OBLIGATOIRE:**

**√âTAPE 1: ANALYSER L'EXISTANT** ‚ö°
- Lire INT√âGRALEMENT l'inventaire section 2
- Scanner le code dans les packages concern√©s
- Identifier les patterns existants (voir section 5)
- V√©rifier si la fonctionnalit√© existe D√âJ√Ä

**√âTAPE 2: R√âUTILISER OU √âTENDRE** üîß
- TOUJOURS utiliser services/repositories existants
- √âtendre entit√©s/DTOs au lieu de cr√©er nouveaux
- Suivre conventions nommage (voir section 5)
- Utiliser ApiResponse<T> pour toutes les r√©ponses REST
- Ajouter @Operation et @Tag pour documentation Swagger

**√âTAPE 3: D√âVELOPPER AVEC PATTERNS √âTABLIS** üéØ
- Utiliser @Async pour op√©rations longues
- Impl√©menter validation Jakarta sur DTOs
- G√©rer erreurs via GlobalExceptionHandler
- Logger avec SLF4J (pattern existant)
- Tester endpoints via Swagger UI

**√âTAPE 4: VALIDER LA COH√âRENCE** ‚úÖ
- Respecter architecture layered
- Maintenir la logique de s√©curit√© (CORS, validation)
- Tester int√©gration avec existant
- V√©rifier que health check fonctionne
- Mettre √† jour cet inventaire si nouvelles classes

=================================================================
4. HISTORIQUE DES PROBL√àMES & SOLUTIONS
=================================================================

üìÖ INCIDENT CRITIQUE 
=====================================



=================================================================
5. PATTERNS & CONVENTIONS √âTABLIES
=================================================================

üèóÔ∏è ARCHITECTURE PATTERNS:


üéØ CONVENTIONS NOMMAGE:

CONTROLLERS:
-
SERVICES:
-
REPOSITORIES:

ENTITIES:
- 
DTOS:
- 
üîê S√âCURIT√â PATTERNS:


üóÉÔ∏è DATA PATTERNS:

PAGINATION: Spring Data Pageable standard
RECHERCHE: Criteria queries dans repositories
VALIDATION: Jakarta Validation sur DTOs
MAPPING: MapStruct pour Entity <-> DTO
TIMESTAMPS: @CreationTimestamp, @UpdateTimestamp

=================================================================
6. CHECKLIST DE MAINTENANCE
=================================================================

üîç AVANT CHAQUE MODIFICATION:

‚ñ° Lire cet inventaire complet (section 2)
‚ñ° Scanner les packages concern√©s
‚ñ° Identifier si fonctionnalit√© existe d√©j√†
‚ñ° V√©rifier les patterns √©tablis (section 5)
‚ñ° Planifier r√©utilisation vs cr√©ation

üß™ PENDANT LE D√âVELOPPEMENT:

‚ñ° Respecter les conventions de nommage
‚ñ° Utiliser les services/repositories existants
‚ñ° Maintenir la coh√©rence architecturale
‚ñ° Ajouter validation appropri√©e
‚ñ° Impl√©menter la s√©curit√© selon les patterns

‚úÖ APR√àS CHAQUE MODIFICATION:

‚ñ° Tester les endpoints concern√©s
‚ñ° V√©rifier l'authentification/autorisation
‚ñ° Valider l'int√©gration avec l'existant
‚ñ° Mettre √† jour cet inventaire si n√©cessaire
‚ñ° Documenter les nouveaux patterns

üö® EN CAS DE PROBL√àME:

‚ñ° Consulter l'historique des incidents (section 4)
‚ñ° V√©rifier les logs d'application
‚ñ° Tester les endpoints de base (/ping, /vehicles)
‚ñ° Valider la configuration de s√©curit√©
‚ñ° Utiliser le guide de d√©pannage (section 7)

=================================================================
7. GUIDE DE D√âPANNAGE
=================================================================

üîß PROBL√àMES COURANTS & SOLUTIONS:




ü©∫ DIAGNOSTIC SYST√âMATIQUE:

1
3. API FONCTIONNELLE:
   
4. SWAGGER UI:
   
=================================================================
8. SCRIPTS & COMMANDES UTILES
=================================================================

üöÄ D√âMARRAGE:

# D√©marrage standard
mvn spring-boot:run

# D√©marrage avec profil dev

# D√©marrage sur port custom

# Compilation et d√©marrage


üßπ NETTOYAGE:

# Arr√™ter tous les processus Java
taskkill //F //IM java.exe

# Clean complet Maven
mvn clean

# Rebuild complet
mvn clean package

üîç DIAGNOSTIC:

# V√©rifier port utilis√©
netstat -ano | findstr :8083

# Logs temps r√©el
tail -f logs/application.log

# Test connectivit√© DB
psql -h localhost -p 5432 -U postgres -d auto_occasion_db

üìä TESTS API:

# Health check
curl http://localhost:

# Login admin
curl -X POST http://localhost:
     -H "Content-Type: application/json" \
     


# 
#
üîê S√âCURIT√â:

#
=================================================================
                         NOTES FINALES
=================================================================

üìã UTILISATION DE CE DOCUMENT:

1. TOUJOURS consulter l'inventaire (section 2) avant d√©veloppement
2. RESPECTER les r√®gles anti-duplication (section 3)
3. DOCUMENTER tout nouveau pattern d√©couvert
4. METTRE √Ä JOUR cet inventaire apr√®s modifications importantes
5. UTILISER comme r√©f√©rence lors des reviews de code

üéØ OBJECTIFS:

‚úÖ √âviter 100% des duplications de code
‚úÖ Maintenir coh√©rence architecturale
‚úÖ Acc√©l√©rer le d√©veloppement par r√©utilisation
‚úÖ R√©duire les bugs par patterns √©prouv√©s
‚úÖ Faciliter la maintenance long-terme

üìû EN CAS DE DOUTE:

- Consulter cet inventaire complet
- Scanner le code existant
- Privil√©gier extension vs cr√©ation
- Maintenir les patterns √©tablis

=================================================================
FIN DU DOCUMENT DE R√âF√âRENCE TECHNIQUE
Version 1.0 - 19 septembre 2025
=================================================================